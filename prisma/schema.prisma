generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model applications {
  id                   BigInt                 @id @default(autoincrement())
  name                 String                 @unique
  description          String?
  parent_id            BigInt?
  applications         applications?          @relation("applicationsToapplications", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_applications   applications[]         @relation("applicationsToapplications")
  product_applications product_applications[]

  @@index([name], map: "idx_application_name")
}

model categories {
  id                 BigInt               @id @default(autoincrement())
  name               String               @unique
  parent_id          BigInt?
  description        String?
  categories         categories?          @relation("categoriesTocategories", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_categories   categories[]         @relation("categoriesTocategories")
  product_categories product_categories[]

  @@index([parent_id], map: "idx_parent_category")
}

model certifications {
  id                     BigInt                   @id @default(autoincrement())
  name                   String                   @unique
  description            String?
  applicable_categories  String[]
  certification_body     String?
  certification_type     String?
  product_certifications product_certifications[]

  @@index([name], map: "idx_certification_name")
}

model countries {
  id                 BigInt          @id @default(autoincrement())
  name               String          @unique
  description        String?
  regulations        String?
  characteristics    String?
  required_documents String?
  manufacturers      manufacturers[]

  @@index([name], map: "idx_country_name")
}

model document_types {
  id          BigInt      @id @default(autoincrement())
  name        String      @unique
  description String?
  category    String?
  documents   documents[]

  @@index([name], map: "idx_document_type_name")
}

model documents {
  id                BigInt              @id @default(autoincrement())
  title             String
  url               String
  type_id           BigInt?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @default(now()) @db.Timestamp(6)
  document_types    document_types?     @relation(fields: [type_id], references: [id], onUpdate: NoAction)
  product_documents product_documents[]

  @@index([title], map: "idx_document_title")
  @@index([type_id], map: "idx_document_type")
}

model features {
  id               BigInt             @id @default(autoincrement())
  name             String             @unique
  description      String?
  product_features product_features[]

  @@index([name], map: "idx_feature_name")
}

model images {
  id          BigInt    @id @default(autoincrement())
  title       String?
  url         String
  description String?
  product_id  BigInt?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  products    products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([product_id], map: "idx_image_product")
}

model manufacturer_branches {
  id              BigInt        @id @default(autoincrement())
  manufacturer_id BigInt
  branch_info     String
  manufacturers   manufacturers @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model manufacturer_emails {
  id              BigInt        @id @default(autoincrement())
  manufacturer_id BigInt
  email           String
  manufacturers   manufacturers @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model manufacturer_faxes {
  id              BigInt        @id @default(autoincrement())
  manufacturer_id BigInt
  fax             String
  manufacturers   manufacturers @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model manufacturer_images {
  id              BigInt        @id @default(autoincrement())
  manufacturer_id BigInt
  image_url       String
  description     String?
  manufacturers   manufacturers @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model manufacturer_phones {
  id              BigInt        @id @default(autoincrement())
  manufacturer_id BigInt
  phone           String
  manufacturers   manufacturers @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model manufacturers {
  id                    BigInt                  @id @default(autoincrement())
  name                  String                  @unique
  website               String?
  established           String?
  headquarters          String?
  business_type         String?
  company_overview      String?
  business_overview     String?
  key_milestones        Json?
  annual_revenue        String?
  sales_markets         String[]
  logo                  String?
  building              String?
  linkedin_link         String?
  facebook_link         String?
  country_id            BigInt?
  role                  String?                 @default("manufacturer")
  manufacturer_branches manufacturer_branches[]
  manufacturer_emails   manufacturer_emails[]
  manufacturer_faxes    manufacturer_faxes[]
  manufacturer_images   manufacturer_images[]
  manufacturer_phones   manufacturer_phones[]
  countries             countries?              @relation(fields: [country_id], references: [id], onUpdate: NoAction)
  partner_details       partner_details?
  post_manufacturers    post_manufacturers[]
  products              products[]

  @@index([key_milestones], map: "idx_manufacturer_key_milestones", type: Gin)
  @@index([name], map: "idx_manufacturer_name")
}

model partner_details {
  manufacturer_id      BigInt        @id
  distribution_regions String?
  contract_terms       String?
  partner_contact      String?
  manufacturers        manufacturers @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_manufacturers {
  post_id         BigInt
  manufacturer_id BigInt
  manufacturers   manufacturers @relation(fields: [manufacturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts           posts         @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, manufacturer_id])
}

model post_products {
  post_id    BigInt
  product_id BigInt
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, product_id])
}

model posts {
  id                 BigInt               @id @default(autoincrement())
  title              String
  content            String
  category           post_category
  summary            String?
  image_url          String?
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  post_manufacturers post_manufacturers[]
  post_products      post_products[]
}

model product_applications {
  product_id     BigInt
  application_id BigInt
  applications   applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products       products     @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, application_id])
}

model product_categories {
  product_id  BigInt
  category_id BigInt
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id])
}

model product_certifications {
  product_id       BigInt
  certification_id BigInt
  certifications   certifications @relation(fields: [certification_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products         products       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, certification_id])
}

model product_combo_items {
  id             BigInt         @id @default(autoincrement())
  combo_id       BigInt
  product_id     BigInt
  quantity       Int?           @default(1)
  product_combos product_combos @relation(fields: [combo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products       products       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([combo_id, product_id], map: "unique_combo_product")
  @@index([combo_id], map: "idx_combo")
  @@index([product_id], map: "idx_product")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model product_combos {
  id                  BigInt                @id @default(autoincrement())
  name                String                @unique
  description         String?
  discount_percent    Decimal?              @db.Decimal(5, 2)
  total_price         Decimal               @db.Decimal(10, 2)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @default(now()) @db.Timestamp(6)
  product_combo_items product_combo_items[]

  @@index([name], map: "idx_combo_name")
}

model product_documents {
  product_id  BigInt
  document_id BigInt
  documents   documents @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, document_id])
}

model product_features {
  product_id BigInt
  feature_id BigInt
  description String?
  features   features @relation(fields: [feature_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, feature_id])
}

model products {
  id                     BigInt                   @id @default(autoincrement())
  name                   String                   @unique
  manufacturer_id        BigInt?
  part_number            String?                  @unique
  specifications         Json
  tables                 Json?
  description            String?
  storage_type_id        BigInt?
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  subtitle               String
  images                 images[]
  post_products          post_products[]
  product_applications   product_applications[]
  product_categories     product_categories[]
  product_certifications product_certifications[]
  product_combo_items    product_combo_items[]
  product_documents      product_documents[]
  product_features       product_features[]
  manufacturers          manufacturers?           @relation(fields: [manufacturer_id], references: [id], onUpdate: NoAction)
  storage_types          storage_types?           @relation(fields: [storage_type_id], references: [id], onUpdate: NoAction)

  @@index([manufacturer_id], map: "idx_manufacturer")
  @@index([specifications], map: "idx_product_specs", type: Gin)
  @@index([subtitle], map: "idx_product_subtitle")
  @@index([storage_type_id], map: "idx_storage_type")
}

model storage_types {
  id          BigInt     @id @default(autoincrement())
  name        String     @unique
  description String?
  category    String?
  products    products[]

  @@index([name], map: "idx_storage_type_name")
}

enum post_category {
  news_event
  notice
  tech_blog
  discontinued
  product_launch
}
