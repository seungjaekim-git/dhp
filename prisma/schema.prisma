generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model products {
  id              Int                   @id @default(autoincrement())
  name            String                @unique
  type            String
  manufacturer_id Int?
  part_number     String?               @unique
  specifications  Json
  description     String?
  datasheet_url   String?
  country_id      Int?
  storage_type_id Int?
  created_at      DateTime              @default(now()) @db.Timestamp(6)
  updated_at      DateTime              @db.Timestamp(6)
  images          images[]
  combo_items     product_combo_items[]
  country         countries?            @relation(fields: [country_id], references: [id])
  manufacturer    manufacturers?        @relation(fields: [manufacturer_id], references: [id])
  storage_type    storage_types?        @relation(fields: [storage_type_id], references: [id])
  combos          product_combos[]      @relation("ComboProducts")
  applications    applications[]        @relation("ProductApplications")
  categories      categories[]          @relation("ProductCategories")
  certifications  certifications[]      @relation("ProductCertifications")
  documents       documents[]           @relation("ProductDocuments")
  features        features[]            @relation("ProductFeatures")
  manufacturers   manufacturers[]       @relation("ManufacturerMainProducts")

  @@index([type], map: "idx_product_type")
  @@index([specifications], map: "idx_product_specs", type: Gin)
  @@index([manufacturer_id], map: "idx_manufacturer")
  @@index([country_id], map: "idx_country")
  @@index([storage_type_id], map: "idx_storage_type")
}

model product_combos {
  id               Int                   @id @default(autoincrement())
  name             String                @unique
  description      String?
  discount_percent Decimal?              @db.Decimal(5, 2)
  total_price      Decimal               @db.Decimal(10, 2)
  created_at       DateTime              @default(now()) @db.Timestamp(6)
  updated_at       DateTime              @db.Timestamp(6)
  combo_items      product_combo_items[]
  products         products[]            @relation("ComboProducts")

  @@index([name], map: "idx_combo_name")
}

model product_combo_items {
  id         Int            @id @default(autoincrement())
  combo_id   Int
  product_id Int
  quantity   Int            @default(1)
  combo      product_combos @relation(fields: [combo_id], references: [id], onDelete: Cascade)
  product    products       @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([combo_id, product_id], map: "unique_combo_product")
  @@index([combo_id], map: "idx_combo")
  @@index([product_id], map: "idx_product")
}

model categories {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  parent_id         Int?
  description       String?
  parent            categories?     @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children          categories[]    @relation("CategoryHierarchy")
  manufacturers     manufacturers[] @relation("ManufacturerCategories")
  products          products[]      @relation("ProductCategories")

  @@index([parent_id], map: "idx_parent_category")
}

model applications {
  id                 Int            @id @default(autoincrement())
  name               String         @unique
  description        String?
  parent_id          Int?
  applications       applications?  @relation("applicationsToapplications", fields: [parent_id], references: [id], onDelete: Cascade)
  other_applications applications[] @relation("applicationsToapplications")
  products           products[]     @relation("ProductApplications")

  @@index([name], map: "idx_application_name")
}

model certifications {
  id                    Int        @id @default(autoincrement())
  name                  String     @unique
  description           String?
  applicable_categories String[]
  certification_body    String?
  certification_type    String?
  products              products[] @relation("ProductCertifications")

  @@index([name], map: "idx_certification_name")
}

model features {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  products    products[] @relation("ProductFeatures")

  @@index([name], map: "idx_feature_name")
}

model documents {
  id            Int             @id @default(autoincrement())
  title         String
  url           String
  type_id       Int?
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @db.Timestamp(6)
  document_type document_types? @relation(fields: [type_id], references: [id])
  products      products[]      @relation("ProductDocuments")

  @@index([type_id], map: "idx_document_type")
  @@index([title], map: "idx_document_title")
}

model images {
  id          Int       @id @default(autoincrement())
  title       String?
  url         String
  description String?
  product_id  Int?
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @db.Timestamp(6)
  product     products? @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id], map: "idx_image_product")
}

model manufacturers {
  id                      Int         @id @default(autoincrement())
  name                    String      @unique
  website                 String?
  established            String?
  headquarters           String?
  business_type          String?
  employees              String?
  company_overview       String?
  business_overview      String?
  emails                 String[]
  phones                 String[]
  faxes                  String[]
  key_milestones         Json?
  branches               String[]
  annual_revenue         String?
  sales_markets          String[]
  logo                   String?
  building               String?
  product_images         String[]
  linkedin_link          String?
  facebook_link          String?
  country_id             Int?
  countries              countries?   @relation(fields: [country_id], references: [id], onDelete: Cascade)
  categories             categories[] @relation("ManufacturerCategories")
  products               products[]
  main_products          products[]   @relation("ManufacturerMainProducts")

  @@index([name], map: "idx_manufacturer_name")
}

model countries {
  id                 Int             @id @default(autoincrement())
  name               String          @unique
  description        String?
  regulations        String?
  characteristics    String?
  required_documents String?
  manufacturers      manufacturers[]
  products           products[]

  @@index([name], map: "idx_country_name")
}

model storage_types {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  category    String?
  products    products[]

  @@index([name], map: "idx_storage_type_name")
}

model document_types {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  category    String?
  documents   documents[]

  @@index([name], map: "idx_document_type_name")
}
